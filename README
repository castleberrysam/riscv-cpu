* Overview
Yet another RISC-V soft core.

* Prerequisites
- Building
  - make
  - iverilog
  - yosys
- Testing
  - python3
  - xxd
  - qemu-system-riscv32
  - binutils-riscv64-linux-gnu (including gdb)
- FPGA synthesis
  - vivado
  - Board based on XC7S50 chip or similar
- Misc
  - gtkwave

* Building
Just run make in the top-level directory. The sources in src/ will be built with
iverilog and the tests in test/ will be built with binutils.

* Running/testing
To run a test in qemu, use run-gdb-qemu.sh with the name of a test (for example,
"run-gdb-qemu.sh addi"). To run a test in iverilog, use run-iverilog.sh
instead. Finally, use run-test.py to run both qemu and iverilog and compare the
results. You can specify "all" as the test name to run all of the tests.

Every time you run a test in iverilog, it should dump a tb_top.vcd file in the
working directory with a signal trace for the test. You can examine this vcd
file using gtkwave.

* Synthesis
TODO update this section for fpga

You can use synth-stats.sh to get the critical path and resource usage prior to
techology mapping from yosys. Alternatively, you can use run-yosys.sh to load
the design into an interactive yosys session.

To map the design to LUTs, start an interactive session and run the following:

> techmap
> opt -full
> abc -lut 6
> ltp -noff
> stat

The ltp and stat commands give you the same output as from synth-stats.sh.

* Test format
Currently only assembly is supported for tests. Every test must begin with a
.text directive and end with an invalid instruction (.word 0). The test runner
loads the assembled code at address 0x80000000 and executes it until the invalid
instruction is encountered. The test shouldn't read or write to memory addresses
below 0x80000000 since qemu doesn't like it.

* Task list [2/16]
- [X] Timing constraints/optimization
- [ ] Replacement of qemu with spike
- [ ] Branch prediction
- [ ] Interrupts/exceptions
- [ ] Integer division
- [ ] Memory mapped I/O (peripherals)
- [ ] Virtual memory
- [ ] Privileged ISA
- [ ] Compressed instructions
- [ ] Atomics
- [ ] Caching
- [ ] Floating point
- [ ] Multiple fetch/decode/execute (superscalar)
- [ ] Out-of-order execution
- [ ] Verification using SystemVerilog/UVM
- [X] Synthesis to FPGA

# Local Variables:
# mode: org
# fill-column: 80
# eval: (auto-fill-mode 1)
# End:
